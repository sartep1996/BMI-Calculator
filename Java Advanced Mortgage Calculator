package com.petras;

import java.text.NumberFormat;
import java.util.Scanner;

public class Main {

    final static byte MONTHS_IN_YEARS = 12;
    final static byte PERCENT = 100;

    public static void main(String[] args) {

        int principal = (int) readNumber("Enter Principal Amount: ", 1000, 1_000_000);
        float annualInterestRate = (float) readNumber("Annual Interest Rate: ", 1, 30);
        byte years = (byte) readNumber("Period In Years: ", 1, 12);

        printMortgage(principal, annualInterestRate, years);

        printPaymentSchedule(principal, annualInterestRate, years);

    }

    private static void printMortgage(int principal, float annualInterestRate, byte years) {
        double mortgage = calculateMortgage(principal, annualInterestRate, years);
        String mortgageFormatted = NumberFormat.getCurrencyInstance().format(mortgage);
        System.out.println();
        System.out.println("MORTGAGE");
        System.out.println("--------------------------------");
        System.out.println("Monthly payments: " + mortgageFormatted);
    }

    private static void printPaymentSchedule(int principal, float annualInterestRate, byte years) {
        System.out.println();
        System.out.println("PAYMENT SCHEDULE");
        System.out.println("----------------");
        for (short month = 1; month<= years *MONTHS_IN_YEARS; month++){
           double balance =  calculateBalance(principal, annualInterestRate, years, month);
            System.out.println(NumberFormat.getCurrencyInstance().format(balance));
        }
    }

    public static double readNumber(String prompt, double min, double max ) {
            Scanner scanner = new Scanner(System.in);
            double value;
            while (true) {
                System.out.println(prompt);
                value = scanner.nextFloat();
                if (value >= min && value <= max)
                    break;
                  else System.out.println("Enter a value between " + min + " and " + max);
            }
            return value;
        }

        public static double calculateBalance(
    int principal,
    float annualInterestRate,
    byte years,
    short numberOfPaymentsMade)

{

            double monthlyInterest = annualInterestRate / PERCENT / MONTHS_IN_YEARS;
            int numberOfPayments = years * MONTHS_IN_YEARS;

            double balance = principal
                    * (Math.pow(1+monthlyInterest, numberOfPayments) - Math.pow(1 + monthlyInterest, numberOfPaymentsMade))
                    / (Math.pow(1+monthlyInterest, numberOfPayments) - 1);

            return balance;
    }

    public static double calculateMortgage(
            int principal,
            float annualInterestRate,
            byte years) {

        double monthlyInterest = annualInterestRate / PERCENT / MONTHS_IN_YEARS;
        int numberOfPayments = years * MONTHS_IN_YEARS;

        double mortgage = principal
                * (monthlyInterest * Math.pow(1 + monthlyInterest, numberOfPayments))
                / (Math.pow(1 + monthlyInterest, numberOfPayments) - 1);

        return mortgage;
    }}





